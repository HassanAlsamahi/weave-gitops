
syntax = "proto3";

package wego_server.v1;

option go_package = "github.com/weaveworks/weave-gitops/pkg/protos/applications";

import "google/api/annotations.proto";

import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
      title: "WeGo Applications API",
      version: "0.1";
      description: "The WeGo Applications API handles operations for Weave GitOps Applications";
    };
    consumes: "application/json";
    produces: "application/json";
};

service Applications {
    /**
     * ListApplications returns the list of WeGo applications that the authenticated user has access to.
    */
    rpc ListApplications(ListApplicationsRequest) returns (ListApplicationsResponse) {
        option (google.api.http) = {
            get : "/v1/applications"
        };
    }
    /**
    * GetApplication returns a given application
    */
    rpc GetApplication(GetApplicationRequest) returns (GetApplicationResponse) {
        option (google.api.http) = {
            get : "/v1/applications/{name}"
        };
    }

    /**
    * GetAuthenticationProviders returns a list of the available authentication providers
    */
    rpc GetAuthenticationProviders(GetAuthenticationProvidersRequest) returns(GetAuthenticationProvidersResponse) {
        option (google.api.http) = {
            get : "/v1/auth_providers"
        }; 
    }
    /**
    * Authenticate exchanges a code recieved from an OAuth2 callback for a user token
    */
    rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse) {
        option (google.api.http) = {
            post : "/v1/authenticate/{provider_name}"
            body: "*"
        };
    }

    /**
    * GetUser returns data about the currently authenticated user
    */
    rpc GetUser(GetUserRequest) returns (GetUserResponse) {
        option (google.api.http) = {
            get : "/v1/user"
        }; 
    }
}

message Application {
    string name = 1;  // The name of the application
    string path = 2;  // The file path where the k8s yaml files for this application are stored.
    string url  = 3;  // The git repository URL for this application
}

message ListApplicationsRequest {
    string namespace = 1;  // The namespace to look for applications
}

message ListApplicationsResponse {
   repeated Application applications = 1; // A list of applications
}

message GetApplicationRequest {
    string name      = 1;  // The name of an application
    string namespace = 2;  // The kubernetes namespace of the application. Default is `wego-system`
}

message GetApplicationResponse {
    Application application = 1;
}

message GetAuthenticationProvidersRequest {

}

message OauthProvider {
    string name         = 1;  // The name of the provider, ie 'github', 'gitlab'
    string auth_url     = 2;  // The URL that will be used for the OAuth2 callback flow
    string redirect_uri = 3;  // The URI that users will be taken to after visiting the auth_url
}

message GetAuthenticationProvidersResponse {
    repeated OauthProvider providers = 1;
}

message AuthenticateRequest {
    string provider_name = 1;  // The name of the OAuth provider
    string code          = 2;  // The code received from the OAuth provider via callback
}

message User {
    string email = 1; // The user's email address
}

message AuthenticateResponse {
    string token = 1; // The token that was exchanged for the callback code with the OAuth2 provider
}

message GetUserRequest {

}

message GetUserResponse {
    User user = 1; // Data about the current authenticated user
}
