// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package commits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommitsClient is the client API for Commits service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommitsClient interface {
	//
	// ListCommits returns the list of WeGo commits that the authenticated user has access to.
	ListCommits(ctx context.Context, in *ListCommitsRequest, opts ...grpc.CallOption) (*ListCommitsResponse, error)
}

type commitsClient struct {
	cc grpc.ClientConnInterface
}

func NewCommitsClient(cc grpc.ClientConnInterface) CommitsClient {
	return &commitsClient{cc}
}

func (c *commitsClient) ListCommits(ctx context.Context, in *ListCommitsRequest, opts ...grpc.CallOption) (*ListCommitsResponse, error) {
	out := new(ListCommitsResponse)
	err := c.cc.Invoke(ctx, "/wego_server.v1.Commits/ListCommits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommitsServer is the server API for Commits service.
// All implementations must embed UnimplementedCommitsServer
// for forward compatibility
type CommitsServer interface {
	//
	// ListCommits returns the list of WeGo commits that the authenticated user has access to.
	ListCommits(context.Context, *ListCommitsRequest) (*ListCommitsResponse, error)
	mustEmbedUnimplementedCommitsServer()
}

// UnimplementedCommitsServer must be embedded to have forward compatible implementations.
type UnimplementedCommitsServer struct {
}

func (UnimplementedCommitsServer) ListCommits(context.Context, *ListCommitsRequest) (*ListCommitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommits not implemented")
}
func (UnimplementedCommitsServer) mustEmbedUnimplementedCommitsServer() {}

// UnsafeCommitsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommitsServer will
// result in compilation errors.
type UnsafeCommitsServer interface {
	mustEmbedUnimplementedCommitsServer()
}

func RegisterCommitsServer(s grpc.ServiceRegistrar, srv CommitsServer) {
	s.RegisterService(&Commits_ServiceDesc, srv)
}

func _Commits_ListCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitsServer).ListCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wego_server.v1.Commits/ListCommits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitsServer).ListCommits(ctx, req.(*ListCommitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Commits_ServiceDesc is the grpc.ServiceDesc for Commits service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Commits_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wego_server.v1.Commits",
	HandlerType: (*CommitsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCommits",
			Handler:    _Commits_ListCommits_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/commits/commits.proto",
}
