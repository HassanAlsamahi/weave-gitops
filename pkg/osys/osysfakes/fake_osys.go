// Code generated by counterfeiter. DO NOT EDIT.
package osysfakes

import (
	"sync"

	"github.com/weaveworks/weave-gitops/pkg/osys"
)

type FakeOsys struct {
	ExitStub        func(int)
	exitMutex       sync.RWMutex
	exitArgsForCall []struct {
		arg1 int
	}
	UserHomeDirStub        func() (string, error)
	userHomeDirMutex       sync.RWMutex
	userHomeDirArgsForCall []struct {
	}
	userHomeDirReturns struct {
		result1 string
		result2 error
	}
	userHomeDirReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOsys) Exit(arg1 int) {
	fake.exitMutex.Lock()
	fake.exitArgsForCall = append(fake.exitArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.ExitStub
	fake.recordInvocation("Exit", []interface{}{arg1})
	fake.exitMutex.Unlock()
	if stub != nil {
		fake.ExitStub(arg1)
	}
}

func (fake *FakeOsys) ExitCallCount() int {
	fake.exitMutex.RLock()
	defer fake.exitMutex.RUnlock()
	return len(fake.exitArgsForCall)
}

func (fake *FakeOsys) ExitCalls(stub func(int)) {
	fake.exitMutex.Lock()
	defer fake.exitMutex.Unlock()
	fake.ExitStub = stub
}

func (fake *FakeOsys) ExitArgsForCall(i int) int {
	fake.exitMutex.RLock()
	defer fake.exitMutex.RUnlock()
	argsForCall := fake.exitArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOsys) UserHomeDir() (string, error) {
	fake.userHomeDirMutex.Lock()
	ret, specificReturn := fake.userHomeDirReturnsOnCall[len(fake.userHomeDirArgsForCall)]
	fake.userHomeDirArgsForCall = append(fake.userHomeDirArgsForCall, struct {
	}{})
	stub := fake.UserHomeDirStub
	fakeReturns := fake.userHomeDirReturns
	fake.recordInvocation("UserHomeDir", []interface{}{})
	fake.userHomeDirMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOsys) UserHomeDirCallCount() int {
	fake.userHomeDirMutex.RLock()
	defer fake.userHomeDirMutex.RUnlock()
	return len(fake.userHomeDirArgsForCall)
}

func (fake *FakeOsys) UserHomeDirCalls(stub func() (string, error)) {
	fake.userHomeDirMutex.Lock()
	defer fake.userHomeDirMutex.Unlock()
	fake.UserHomeDirStub = stub
}

func (fake *FakeOsys) UserHomeDirReturns(result1 string, result2 error) {
	fake.userHomeDirMutex.Lock()
	defer fake.userHomeDirMutex.Unlock()
	fake.UserHomeDirStub = nil
	fake.userHomeDirReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeOsys) UserHomeDirReturnsOnCall(i int, result1 string, result2 error) {
	fake.userHomeDirMutex.Lock()
	defer fake.userHomeDirMutex.Unlock()
	fake.UserHomeDirStub = nil
	if fake.userHomeDirReturnsOnCall == nil {
		fake.userHomeDirReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.userHomeDirReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeOsys) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.exitMutex.RLock()
	defer fake.exitMutex.RUnlock()
	fake.userHomeDirMutex.RLock()
	defer fake.userHomeDirMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeOsys) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ osys.Osys = new(FakeOsys)
