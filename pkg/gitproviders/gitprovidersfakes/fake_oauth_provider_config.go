// Code generated by counterfeiter. DO NOT EDIT.
package gitprovidersfakes

import (
	"context"
	"sync"

	"github.com/weaveworks/weave-gitops/pkg/gitproviders"
	"golang.org/x/oauth2"
)

type FakeOauthProviderConfig struct {
	AuthCodeURLStub        func(string, ...oauth2.AuthCodeOption) string
	authCodeURLMutex       sync.RWMutex
	authCodeURLArgsForCall []struct {
		arg1 string
		arg2 []oauth2.AuthCodeOption
	}
	authCodeURLReturns struct {
		result1 string
	}
	authCodeURLReturnsOnCall map[int]struct {
		result1 string
	}
	ExchangeStub        func(context.Context, string, ...oauth2.AuthCodeOption) (*oauth2.Token, error)
	exchangeMutex       sync.RWMutex
	exchangeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []oauth2.AuthCodeOption
	}
	exchangeReturns struct {
		result1 *oauth2.Token
		result2 error
	}
	exchangeReturnsOnCall map[int]struct {
		result1 *oauth2.Token
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOauthProviderConfig) AuthCodeURL(arg1 string, arg2 ...oauth2.AuthCodeOption) string {
	fake.authCodeURLMutex.Lock()
	ret, specificReturn := fake.authCodeURLReturnsOnCall[len(fake.authCodeURLArgsForCall)]
	fake.authCodeURLArgsForCall = append(fake.authCodeURLArgsForCall, struct {
		arg1 string
		arg2 []oauth2.AuthCodeOption
	}{arg1, arg2})
	stub := fake.AuthCodeURLStub
	fakeReturns := fake.authCodeURLReturns
	fake.recordInvocation("AuthCodeURL", []interface{}{arg1, arg2})
	fake.authCodeURLMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeOauthProviderConfig) AuthCodeURLCallCount() int {
	fake.authCodeURLMutex.RLock()
	defer fake.authCodeURLMutex.RUnlock()
	return len(fake.authCodeURLArgsForCall)
}

func (fake *FakeOauthProviderConfig) AuthCodeURLCalls(stub func(string, ...oauth2.AuthCodeOption) string) {
	fake.authCodeURLMutex.Lock()
	defer fake.authCodeURLMutex.Unlock()
	fake.AuthCodeURLStub = stub
}

func (fake *FakeOauthProviderConfig) AuthCodeURLArgsForCall(i int) (string, []oauth2.AuthCodeOption) {
	fake.authCodeURLMutex.RLock()
	defer fake.authCodeURLMutex.RUnlock()
	argsForCall := fake.authCodeURLArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeOauthProviderConfig) AuthCodeURLReturns(result1 string) {
	fake.authCodeURLMutex.Lock()
	defer fake.authCodeURLMutex.Unlock()
	fake.AuthCodeURLStub = nil
	fake.authCodeURLReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeOauthProviderConfig) AuthCodeURLReturnsOnCall(i int, result1 string) {
	fake.authCodeURLMutex.Lock()
	defer fake.authCodeURLMutex.Unlock()
	fake.AuthCodeURLStub = nil
	if fake.authCodeURLReturnsOnCall == nil {
		fake.authCodeURLReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.authCodeURLReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeOauthProviderConfig) Exchange(arg1 context.Context, arg2 string, arg3 ...oauth2.AuthCodeOption) (*oauth2.Token, error) {
	fake.exchangeMutex.Lock()
	ret, specificReturn := fake.exchangeReturnsOnCall[len(fake.exchangeArgsForCall)]
	fake.exchangeArgsForCall = append(fake.exchangeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []oauth2.AuthCodeOption
	}{arg1, arg2, arg3})
	stub := fake.ExchangeStub
	fakeReturns := fake.exchangeReturns
	fake.recordInvocation("Exchange", []interface{}{arg1, arg2, arg3})
	fake.exchangeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOauthProviderConfig) ExchangeCallCount() int {
	fake.exchangeMutex.RLock()
	defer fake.exchangeMutex.RUnlock()
	return len(fake.exchangeArgsForCall)
}

func (fake *FakeOauthProviderConfig) ExchangeCalls(stub func(context.Context, string, ...oauth2.AuthCodeOption) (*oauth2.Token, error)) {
	fake.exchangeMutex.Lock()
	defer fake.exchangeMutex.Unlock()
	fake.ExchangeStub = stub
}

func (fake *FakeOauthProviderConfig) ExchangeArgsForCall(i int) (context.Context, string, []oauth2.AuthCodeOption) {
	fake.exchangeMutex.RLock()
	defer fake.exchangeMutex.RUnlock()
	argsForCall := fake.exchangeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeOauthProviderConfig) ExchangeReturns(result1 *oauth2.Token, result2 error) {
	fake.exchangeMutex.Lock()
	defer fake.exchangeMutex.Unlock()
	fake.ExchangeStub = nil
	fake.exchangeReturns = struct {
		result1 *oauth2.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeOauthProviderConfig) ExchangeReturnsOnCall(i int, result1 *oauth2.Token, result2 error) {
	fake.exchangeMutex.Lock()
	defer fake.exchangeMutex.Unlock()
	fake.ExchangeStub = nil
	if fake.exchangeReturnsOnCall == nil {
		fake.exchangeReturnsOnCall = make(map[int]struct {
			result1 *oauth2.Token
			result2 error
		})
	}
	fake.exchangeReturnsOnCall[i] = struct {
		result1 *oauth2.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeOauthProviderConfig) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.authCodeURLMutex.RLock()
	defer fake.authCodeURLMutex.RUnlock()
	fake.exchangeMutex.RLock()
	defer fake.exchangeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeOauthProviderConfig) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gitproviders.OauthProviderConfig = new(FakeOauthProviderConfig)
