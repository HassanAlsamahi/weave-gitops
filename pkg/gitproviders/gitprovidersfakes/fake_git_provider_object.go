// Code generated by counterfeiter. DO NOT EDIT.
package gitprovidersfakes

import (
	"sync"

	"github.com/fluxcd/go-git-providers/gitprovider"
)

type FakeObject struct {
	APIObjectStub        func() interface{}
	aPIObjectMutex       sync.RWMutex
	aPIObjectArgsForCall []struct {
	}
	aPIObjectReturns struct {
		result1 interface{}
	}
	aPIObjectReturnsOnCall map[int]struct {
		result1 interface{}
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeObject) APIObject() interface{} {
	fake.aPIObjectMutex.Lock()
	ret, specificReturn := fake.aPIObjectReturnsOnCall[len(fake.aPIObjectArgsForCall)]
	fake.aPIObjectArgsForCall = append(fake.aPIObjectArgsForCall, struct {
	}{})
	stub := fake.APIObjectStub
	fakeReturns := fake.aPIObjectReturns
	fake.recordInvocation("APIObject", []interface{}{})
	fake.aPIObjectMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeObject) APIObjectCallCount() int {
	fake.aPIObjectMutex.RLock()
	defer fake.aPIObjectMutex.RUnlock()
	return len(fake.aPIObjectArgsForCall)
}

func (fake *FakeObject) APIObjectCalls(stub func() interface{}) {
	fake.aPIObjectMutex.Lock()
	defer fake.aPIObjectMutex.Unlock()
	fake.APIObjectStub = stub
}

func (fake *FakeObject) APIObjectReturns(result1 interface{}) {
	fake.aPIObjectMutex.Lock()
	defer fake.aPIObjectMutex.Unlock()
	fake.APIObjectStub = nil
	fake.aPIObjectReturns = struct {
		result1 interface{}
	}{result1}
}

func (fake *FakeObject) APIObjectReturnsOnCall(i int, result1 interface{}) {
	fake.aPIObjectMutex.Lock()
	defer fake.aPIObjectMutex.Unlock()
	fake.APIObjectStub = nil
	if fake.aPIObjectReturnsOnCall == nil {
		fake.aPIObjectReturnsOnCall = make(map[int]struct {
			result1 interface{}
		})
	}
	fake.aPIObjectReturnsOnCall[i] = struct {
		result1 interface{}
	}{result1}
}

func (fake *FakeObject) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.aPIObjectMutex.RLock()
	defer fake.aPIObjectMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeObject) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gitprovider.Object = new(FakeObject)

type FakePullRequest struct {
	APIObjectStub        func() interface{}
	aPIObjectMutex       sync.RWMutex
	aPIObjectArgsForCall []struct {
	}
	aPIObjectReturns struct {
		result1 interface{}
	}
	aPIObjectReturnsOnCall map[int]struct {
		result1 interface{}
	}
	GetStub        func() gitprovider.PullRequestInfo
	getMutex       sync.RWMutex
	getArgsForCall []struct {
	}
	getReturns struct {
		result1 gitprovider.PullRequestInfo
	}
	getReturnsOnCall map[int]struct {
		result1 gitprovider.PullRequestInfo
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePullRequest) APIObject() interface{} {
	fake.aPIObjectMutex.Lock()
	ret, specificReturn := fake.aPIObjectReturnsOnCall[len(fake.aPIObjectArgsForCall)]
	fake.aPIObjectArgsForCall = append(fake.aPIObjectArgsForCall, struct {
	}{})
	stub := fake.APIObjectStub
	fakeReturns := fake.aPIObjectReturns
	fake.recordInvocation("APIObject", []interface{}{})
	fake.aPIObjectMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePullRequest) APIObjectCallCount() int {
	fake.aPIObjectMutex.RLock()
	defer fake.aPIObjectMutex.RUnlock()
	return len(fake.aPIObjectArgsForCall)
}

func (fake *FakePullRequest) APIObjectCalls(stub func() interface{}) {
	fake.aPIObjectMutex.Lock()
	defer fake.aPIObjectMutex.Unlock()
	fake.APIObjectStub = stub
}

func (fake *FakePullRequest) APIObjectReturns(result1 interface{}) {
	fake.aPIObjectMutex.Lock()
	defer fake.aPIObjectMutex.Unlock()
	fake.APIObjectStub = nil
	fake.aPIObjectReturns = struct {
		result1 interface{}
	}{result1}
}

func (fake *FakePullRequest) APIObjectReturnsOnCall(i int, result1 interface{}) {
	fake.aPIObjectMutex.Lock()
	defer fake.aPIObjectMutex.Unlock()
	fake.APIObjectStub = nil
	if fake.aPIObjectReturnsOnCall == nil {
		fake.aPIObjectReturnsOnCall = make(map[int]struct {
			result1 interface{}
		})
	}
	fake.aPIObjectReturnsOnCall[i] = struct {
		result1 interface{}
	}{result1}
}

func (fake *FakePullRequest) Get() gitprovider.PullRequestInfo {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
	}{})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePullRequest) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakePullRequest) GetCalls(stub func() gitprovider.PullRequestInfo) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakePullRequest) GetReturns(result1 gitprovider.PullRequestInfo) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 gitprovider.PullRequestInfo
	}{result1}
}

func (fake *FakePullRequest) GetReturnsOnCall(i int, result1 gitprovider.PullRequestInfo) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 gitprovider.PullRequestInfo
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 gitprovider.PullRequestInfo
	}{result1}
}

func (fake *FakePullRequest) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.aPIObjectMutex.RLock()
	defer fake.aPIObjectMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePullRequest) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gitprovider.PullRequest = new(FakePullRequest)
